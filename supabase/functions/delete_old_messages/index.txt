











import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async () => {
  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!supabaseUrl || !supabaseServiceRoleKey) {
      console.error('Missing Supabase URL or Service Role Key.');
      return new Response(
        JSON.stringify({ error: 'Server configuration error.' }),
        { status: 500 }
      );
    }

    const supabase: SupabaseClient = createClient(
      supabaseUrl,
      supabaseServiceRoleKey
    );

    
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - 14);

    
    const { data: freeUsers, error: usersError } = await supabase
      .from('users')
      .select('id')
      .eq('plan', 'free');

    if (usersError) {
      console.error('Error fetching free-plan users:', usersError.message);
      return new Response(
        JSON.stringify({ error: 'Error fetching users' }),
        { status: 500 }
      );
    }

    if (!freeUsers || freeUsers.length === 0) {
      return new Response(
        JSON.stringify({ message: 'No old messages to delete.' }),
        { status: 200 }
      );
    }

    const freeUserIds = freeUsers.map((user: { id: string }) => user.id);

    
    const { data: freeProjects, error: projectError } = await supabase
      .from('projects')
      .select('id')
      .in('created_by', freeUserIds);

    if (projectError) {
      console.error(
        'Error fetching projects with free-plan owners:',
        projectError.message
      );
      return new Response(
        JSON.stringify({ error: 'Error fetching projects' }),
        { status: 500 }
      );
    }

    if (!freeProjects || freeProjects.length === 0) {
      return new Response(
        JSON.stringify({ message: 'No old messages to delete.' }),
        { status: 200 }
      );
    }

    
    const freeProjectIds = freeProjects.map(
      (project: { id: string }) => project.id
    );

    
    const fourteenDaysAgo = new Date(
      Date.now() - 14 * 24 * 60 * 60 * 1000
    ).toISOString();

    const { error: deleteError } = await supabase
      .from('messages')
      .delete()
      .in('project_id', freeProjectIds)
      .lt('created_at', fourteenDaysAgo);

    if (deleteError) {
      console.error('Error deleting old messages:', deleteError.message);
      return new Response(
        JSON.stringify({ error: 'Error deleting old messages' }),
        { status: 500 }
      );
    }

    return new Response(
      JSON.stringify({ message: 'Old messages deleted successfully.' }),
      { status: 200 }
    );
  } catch (error) {
    console.error('Unexpected error:', error);
    return new Response(
      JSON.stringify({ error: 'Unexpected error occurred.' }),
      { status: 500 }
    );
  }
});